// üî§ Hiragana y≈çon combos
const hiraganaGroups = [
  "„Åç„ÇÉ", "„Åç„ÇÖ", "„Åç„Çá",
  "„Åó„ÇÉ", "„Åó„ÇÖ", "„Åó„Çá",
  "„Å°„ÇÉ", "„Å°„ÇÖ", "„Å°„Çá",
  "„Å´„ÇÉ", "„Å´„ÇÖ", "„Å´„Çá",
  "„Å≤„ÇÉ", "„Å≤„ÇÖ", "„Å≤„Çá",
  "„Åø„ÇÉ", "„Åø„ÇÖ", "„Åø„Çá",
  "„Çä„ÇÉ", "„Çä„ÇÖ", "„Çä„Çá",
  "„Åé„ÇÉ", "„Åé„ÇÖ", "„Åé„Çá",
  "„Åò„ÇÉ", "„Åò„ÇÖ", "„Åò„Çá",
  "„Å¢„ÇÉ", "„Å¢„ÇÖ", "„Å¢„Çá",
  "„Å≥„ÇÉ", "„Å≥„ÇÖ", "„Å≥„Çá",
  "„Å¥„ÇÉ", "„Å¥„ÇÖ", "„Å¥„Çá",
];

// üî§ Katakana y≈çon combos
const katakanaGroups = [
  "„Ç≠„É£", "„Ç≠„É•", "„Ç≠„Éß",
  "„Ç∑„É£", "„Ç∑„É•", "„Ç∑„Éß",
  "„ÉÅ„É£", "„ÉÅ„É•", "„ÉÅ„Éß",
  "„Éã„É£", "„Éã„É•", "„Éã„Éß",
  "„Éí„É£", "„Éí„É•", "„Éí„Éß",
  "„Éü„É£", "„Éü„É•", "„Éü„Éß",
  "„É™„É£", "„É™„É•", "„É™„Éß",
  "„ÇÆ„É£", "„ÇÆ„É•", "„ÇÆ„Éß",
  "„Ç∏„É£", "„Ç∏„É•", "„Ç∏„Éß",
  "„ÉÇ„É£", "„ÉÇ„É•", "„ÉÇ„Éß",
  "„Éì„É£", "„Éì„É•", "„Éì„Éß",
  "„Éî„É£", "„Éî„É•", "„Éî„Éß",
];

// üî§ Katakana Small Vowel Combinations (New Set)
// These typically involve a full-sized kana + a small vowel („Ç°, „Ç£, „Ç•, „Çß, „Ç©)
// to represent foreign sounds. This list is not exhaustive, but covers common ones.
const katakanaSmallVowelCombos = [
  // ti, di, etc.
  "„ÉÜ„Ç£", "„Éá„Ç£",
  // tu, du
  "„Éà„Ç•", "„Éâ„Ç•",
  // fa, fi, fu, fe, fo
  "„Éï„Ç°", "„Éï„Ç£", "„Éï„Çß", "„Éï„Ç©",
  // cha, chu, cho (these are sometimes written with small vowels in gairaigo too, though less common than the standard „ÉÅ„É£, „ÉÅ„É•, „ÉÅ„Éß)
  "„ÉÅ„Çß", // already covered by „ÉÅ„É£, „ÉÅ„É•, „ÉÅ„Éß as yoon, but "„ÉÅ„Çß" is specifically with small E
  // shi, ji (for 'she', 'je')
  "„Ç∑„Çß", "„Ç∏„Çß",
  // vi, ve, vo (often derived from „É¥ + small vowel)
  "„É¥„Ç°", "„É¥„Ç£", "„É¥", "„É¥„Çß", "„É¥„Ç©", // Note: „É¥ is a single character, often combined with small vowels.
  // zi, ze, zo etc. for foreign 'z' sounds (e.g., '„Éá„Ç£„Ç∫„Éã„Éº' - Disney)
  "„ÉÑ„Ç°", "„ÉÑ„Çß", "„ÉÑ„Ç©", // ts + a, e, o
  "„Çπ„Ç£", // si + small i -> "si" like "sweet"
  // some less common ones, but for completeness
  "„Ç¶„Ç£", "„Ç¶„Çß", "„Ç¶„Ç©",
  "„Ç§„Çß", "„Ç∑„Ç£", "„Ç∫„Ç£", "„ÉÑ„Ç£", "„ÉÅ„Ç£",
  "„ÉÜ„Ç£„Çß", "„Éá„Ç£„Çß",
  "„Éï„É•", "„Éï„Éß",
  "„Ç∞„Ç°", "„ÇØ„Ç°", "„ÇØ„Ç£", "„ÇØ„Çß", "„ÇØ„Ç©",
  "„É¥„É•", "„É¥„Éß",
];

// üß† Unified group list - Now includes small vowel combinations
const kanaGroups = [
    ...hiraganaGroups,
    ...katakanaGroups,
    ...katakanaSmallVowelCombos // Add the new combinations here
];

// üîß Tokenizer function (splits smartly)
export function tokenizeKana(input: string): string[] {
  const result: string[] = [];
  let i = 0;

  while (i < input.length) {
    const currentChar = input[i];
    const nextChar = input[i + 1];
    const nextNextChar = input[i + 2];

    // 1. Handle Sokuon („Å£/„ÉÉ)
    if (currentChar === "„Å£" || currentChar === "„ÉÉ") {
      // If sokuon is the last character, treat it as a standalone '„Å£' or '„ÉÉ'
      if (i + 1 >= input.length) {
        result.push(currentChar);
        i += 1;
        continue;
      }

      // Check for a 3-char combo (Sokuon + 2-char y≈çon/small vowel combo) after sokuon
      // e.g., '„ÉÉ„ÉÜ' („ÉÉ + „ÉÜ), '„ÉÉ„ÉÅ„Éß' („ÉÉ + „ÉÅ„Éß)
      const potentialThreeCharCombo = input.substring(i + 1, i + 3); // nextChar + nextNextChar
      if (i + 2 < input.length && (kanaGroups.includes(potentialThreeCharCombo) || katakanaSmallVowelCombos.includes(potentialThreeCharCombo))) {
         result.push(currentChar + potentialThreeCharCombo); // e.g., "„ÉÉ„ÉÜ" or "„ÉÉ„ÉÅ„Éß"
         i += 3; // Consume „ÉÉ, char1, char2
         continue;
      }

      // If not a specific 2-char combo, then it's a single character after sokuon
      result.push(currentChar + nextChar); // e.g., "„ÉÉ„ÉÅ" for „Éû„ÉÉ„ÉÅ, "„ÉÉ„Çø" for „Éõ„ÉÉ„Éà
      i += 2; // Consume „ÉÉ and the character after it
      continue;
    }

    // 2. Prioritize checking for Katakana Small Vowel Combinations (2 or 3 characters)
    // Example: „ÉÜ + „Ç£ = „ÉÜ„Ç£ (2 chars)
    // Example: „É¥ + „Çß = „É¥„Çß (2 chars)
    // It's important to check 3-character small vowel combos before 2-character ones if they exist,
    // though most are 2 characters (base kana + small vowel).
    const twoChar = currentChar + nextChar;
    const threeChar = currentChar + nextChar + nextNextChar; // For potential combos like „Éï + „Ç© + „É≥ = „Éï„Ç©„É≥

    if (i + 2 < input.length && katakanaSmallVowelCombos.includes(threeChar)) {
        result.push(threeChar);
        i += 3;
        continue;
    }
    if (i + 1 < input.length && katakanaSmallVowelCombos.includes(twoChar)) {
        result.push(twoChar);
        i += 2;
        continue;
    }


    // 3. Handle 3-character y≈çon combos (e.g., „Åç„Çá, „ÉÅ„Éß) - These were already in kanaGroups
    // (Ensure kanaGroups is broad enough, or specifically target these if needed)
    if (i + 2 < input.length && kanaGroups.includes(threeChar)) { // This will now catch y≈çon from kanaGroups
      result.push(threeChar);
      i += 3;
      continue;
    }

    // 4. Handle 2-character y≈çon combos (e.g., „Åç„ÇÉ, „Ç∑„É£) - These were already in kanaGroups
    if (i + 1 < input.length && kanaGroups.includes(twoChar)) { // This will now catch y≈çon from kanaGroups
      result.push(twoChar);
      i += 2;
      continue;
      // Note: If a twoChar is both a standard kanaGroup and a katakanaSmallVowelCombo,
      // the order of checks (2 then 4) ensures the small vowel combo is prioritized.
      // For instance, "„Ç∑„Çß" is in both; the check for katakanaSmallVowelCombos will catch it first.
    }


    // 5. Handle Ch≈çonpu („Éº)
    if (currentChar === "„Éº" && result.length > 0) {
      result[result.length - 1] += currentChar; // Merge into previous token
    } else {
      // 6. Handle single characters
      result.push(currentChar);
    }
    i += 1;
  }

  return result;
}